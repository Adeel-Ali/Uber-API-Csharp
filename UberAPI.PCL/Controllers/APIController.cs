/*
 * UberAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/13/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UberAPI.PCL;
using UberAPI.PCL.Http.Request;
using UberAPI.PCL.Http.Response;
using UberAPI.PCL.Http.Client;
using UberAPI.PCL.Exceptions;
using UberAPI.PCL.Models;

namespace UberAPI.PCL.Controllers
{
    public partial class APIController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static APIController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static APIController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new APIController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// The Promotions endpoint returns information about the promotion that will be available to a new user based on their activity's location. These promotions do not apply for existing users.
        /// </summary>
        /// <param name="GetPromotionsInput">Object containing request parameters</param>
        /// <return>Returns the PromotionsResponse response from the API call</return>
        public PromotionsResponse GetPromotions(GetPromotionsInput input)
        {
            Task<PromotionsResponse> t = GetPromotionsAsync(input);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// The Promotions endpoint returns information about the promotion that will be available to a new user based on their activity's location. These promotions do not apply for existing users.
        /// </summary>
        /// <param name="GetPromotionsInput">Object containing request parameters</param>
        /// <return>Returns the PromotionsResponse response from the API call</return>
        public async Task<PromotionsResponse> GetPromotionsAsync(GetPromotionsInput input)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/promotions");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "end_latitude", input.EndLatitude },
                { "end_longitude", input.EndLongitude },
                { "start_latitude", input.StartLatitude },
                { "start_longitude", input.StartLongitude }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes

            //return null on 404
            if (_response.StatusCode == 404)
                 return null;

            else if (_response.StatusCode == 400)
                throw new APIException(@"Malformed request.", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Unauthorized the request requires user authentication (not logged in).", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", _context);

            else if (_response.StatusCode == 406)
                throw new APIException(@"Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types, such as ?Unacceptable content type. Request resource as: application/json.", _context);

            else if (_response.StatusCode == 409)
                throw new APIException(@"A conflict needs to be resolved before the request can be made.", _context);

            else if (_response.StatusCode == 422)
                throw new APIException(@"Invalid request. The request body is parse-able however with invalid content or there are issues with a rider's user account.", _context);

            else if (_response.StatusCode == 429)
                throw new APIException(@"Too Many Requests. Rate limited", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Internal Server Error.", _context);

            else if (_response.StatusCode == 222)
                throw new APIException(@"bac", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<PromotionsResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// The Request endpoint allows a ride to be requested on behalf of an Uber user given their desired product, start, and end locations. Please review the Sandbox documentation on how to develop and test against these endpoints without making real-world Requests and being charged.
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Request response from the API call</return>
        public Request CreateRequest(RequestBody body)
        {
            Task<Request> t = CreateRequestAsync(body);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// The Request endpoint allows a ride to be requested on behalf of an Uber user given their desired product, start, and end locations. Please review the Sandbox documentation on how to develop and test against these endpoints without making real-world Requests and being charged.
        /// </summary>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Request response from the API call</return>
        public async Task<Request> CreateRequestAsync(RequestBody body)
        {
            //validating required parameters
            if (null == body)
                throw new ArgumentNullException("body", "The parameter \"body\" is a required parameter and cannot be null.");

            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/requests");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes

            //return null on 404
            if (_response.StatusCode == 404)
                 return null;

            else if (_response.StatusCode == 400)
                throw new APIException(@"Malformed request", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Unauthorized the request requires user authentication (not logged in).", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", _context);

            else if (_response.StatusCode == 406)
                throw new APIException(@"Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types, such as ?Unacceptable content type. Request resource as: application/json", _context);

            else if (_response.StatusCode == 409)
                throw new APIException(@"A conflict needs to be resolved before the request can be made.", _context);

            else if (_response.StatusCode == 422)
                throw new APIException(@"Invalid request. The request body is parse-able however with invalid content or there are issues with a rider's user account.", _context);

            else if (_response.StatusCode == 429)
                throw new APIException(@"Too Many Requests. Rate limited.", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Internal Server Error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Request>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Cancel an ongoing Request on behalf of a rider.
        /// </summary>
        /// <param name="requestId">Required parameter: Unique identifier representing a Request.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteRequestCancel(string requestId)
        {
            Task t = DeleteRequestCancelAsync(requestId);
            Task.WaitAll(t);
        }

        /// <summary>
        /// Cancel an ongoing Request on behalf of a rider.
        /// </summary>
        /// <param name="requestId">Required parameter: Unique identifier representing a Request.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteRequestCancelAsync(string requestId)
        {
            //validating required parameters
            if (null == requestId)
                throw new ArgumentNullException("requestId", "The parameter \"requestId\" is a required parameter and cannot be null.");

            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/requests/{request_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "request_id", requestId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new APIException(@"Malformed request.", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Unauthorized the request requires user authentication (not logged in).", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", _context);

            else if (_response.StatusCode == 404)
                throw new APIException(@"Not found", _context);

            else if (_response.StatusCode == 406)
                throw new APIException(@"Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types, such as ?Unacceptable content type. Request resource as: application/json.", _context);

            else if (_response.StatusCode == 409)
                throw new APIException(@"A conflict needs to be resolved before the request can be made", _context);

            else if (_response.StatusCode == 422)
                throw new APIException(@"Invalid request. The request body is parse-able however with invalid content or there are issues with a rider's user account.", _context);

            else if (_response.StatusCode == 429)
                throw new APIException(@"Too Many Requests. Rate limited.", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Internal Server Error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Get a map with a visual representation of a Request.
        /// </summary>
        /// <param name="requestId">Required parameter: Unique identifier representing a Request.</param>
        /// <return>Returns the RequestMapResponse response from the API call</return>
        public RequestMapResponse GetRequestMap(string requestId)
        {
            Task<RequestMapResponse> t = GetRequestMapAsync(requestId);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Get a map with a visual representation of a Request.
        /// </summary>
        /// <param name="requestId">Required parameter: Unique identifier representing a Request.</param>
        /// <return>Returns the RequestMapResponse response from the API call</return>
        public async Task<RequestMapResponse> GetRequestMapAsync(string requestId)
        {
            //validating required parameters
            if (null == requestId)
                throw new ArgumentNullException("requestId", "The parameter \"requestId\" is a required parameter and cannot be null.");

            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/requests/{request_id}/map");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "request_id", requestId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes

            //return null on 404
            if (_response.StatusCode == 404)
                 return null;

            else if (_response.StatusCode == 400)
                throw new APIException(@"Malformed request.", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Unauthorized the request requires user authentication (not logged in).", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues", _context);

            else if (_response.StatusCode == 406)
                throw new APIException(@"Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types, such as ?Unacceptable content type. Request resource as: application/json.", _context);

            else if (_response.StatusCode == 409)
                throw new APIException(@"A conflict needs to be resolved before the request can be made.", _context);

            else if (_response.StatusCode == 422)
                throw new APIException(@"Invalid request. The request body is parse-able however with invalid content or there are issues with a rider's user account.", _context);

            else if (_response.StatusCode == 429)
                throw new APIException(@"Too Many Requests. Rate limited.", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Internal Server Error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestMapResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.
        /// </summary>
        /// <param name="GetPriceEstimatesInput">Object containing request parameters</param>
        /// <return>Returns the PriceEstimateCollection response from the API call</return>
        public PriceEstimateCollection GetPriceEstimates(GetPriceEstimatesInput input)
        {
            Task<PriceEstimateCollection> t = GetPriceEstimatesAsync(input);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.
        /// </summary>
        /// <param name="GetPriceEstimatesInput">Object containing request parameters</param>
        /// <return>Returns the PriceEstimateCollection response from the API call</return>
        public async Task<PriceEstimateCollection> GetPriceEstimatesAsync(GetPriceEstimatesInput input)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/estimates/price");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "end_latitude", input.EndLatitude },
                { "end_longitude", input.EndLongitude },
                { "start_latitude", input.StartLatitude },
                { "start_longitude", input.StartLongitude }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes

            //return null on 404
            if (_response.StatusCode == 404)
                 return null;

            else if (_response.StatusCode == 400)
                throw new APIException(@"Malformed request.", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Unauthorized the request requires user authentication (not logged in).", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", _context);

            else if (_response.StatusCode == 406)
                throw new APIException(@"Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: ?Unacceptable content type. Request resource as: application/json, etc.", _context);

            else if (_response.StatusCode == 422)
                throw new APIException(@"Invalid request. The request body is parse-able however with invalid content.", _context);

            else if (_response.StatusCode == 429)
                throw new APIException(@"Too Many Requests. Rate limited.", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Internal Server Error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<PriceEstimateCollection>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.
        /// </summary>
        /// <param name="GetTimeEstimatesInput">Object containing request parameters</param>
        /// <return>Returns the TimeEstimateCollection response from the API call</return>
        public TimeEstimateCollection GetTimeEstimates(GetTimeEstimatesInput input)
        {
            Task<TimeEstimateCollection> t = GetTimeEstimatesAsync(input);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.
        /// </summary>
        /// <param name="GetTimeEstimatesInput">Object containing request parameters</param>
        /// <return>Returns the TimeEstimateCollection response from the API call</return>
        public async Task<TimeEstimateCollection> GetTimeEstimatesAsync(GetTimeEstimatesInput input)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/estimates/time");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "start_latitude", input.StartLatitude },
                { "start_longitude", input.StartLongitude },
                { "customer_uuid", input.CustomerUuid },
                { "product_id", input.ProductId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes

            //return null on 404
            if (_response.StatusCode == 404)
                 return null;

            else if (_response.StatusCode == 400)
                throw new APIException(@"Malformed request.", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Unauthorized the request requires user authentication (not logged in).", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", _context);

            else if (_response.StatusCode == 406)
                throw new APIException(@"Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: ?Unacceptable content type. Request resource as: application/json, etc.", _context);

            else if (_response.StatusCode == 422)
                throw new APIException(@"Invalid request. The request body is parse-able however with invalid content.", _context);

            else if (_response.StatusCode == 429)
                throw new APIException(@"Too Many Requests. Rate limited.", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Internal Server Error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<TimeEstimateCollection>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will include pickup locations and times, dropoff locations and times, the distance of past requests, and information about which products were requested.
        /// </summary>
        /// <param name="GetUserActivityV11Input">Object containing request parameters</param>
        /// <return>Returns the UserActivity response from the API call</return>
        public UserActivity GetUserActivityV11(GetUserActivityV11Input input)
        {
            Task<UserActivity> t = GetUserActivityV11Async(input);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will include pickup locations and times, dropoff locations and times, the distance of past requests, and information about which products were requested.
        /// </summary>
        /// <param name="GetUserActivityV11Input">Object containing request parameters</param>
        /// <return>Returns the UserActivity response from the API call</return>
        public async Task<UserActivity> GetUserActivityV11Async(GetUserActivityV11Input input)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1.1/history");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "limit", input.Limit },
                { "offset", input.Offset }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes

            //return null on 404
            if (_response.StatusCode == 404)
                 return null;

            else if (_response.StatusCode == 400)
                throw new APIException(@"Malformed request.", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Unauthorized the request requires user authentication (not logged in).", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", _context);

            else if (_response.StatusCode == 406)
                throw new APIException(@"Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: ?Unacceptable content type. Request resource as: application/json, etc.", _context);

            else if (_response.StatusCode == 422)
                throw new APIException(@"Invalid request. The request body is parse-able however with invalid content.", _context);

            else if (_response.StatusCode == 429)
                throw new APIException(@"Too Many Requests. Rate limited.", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Internal Server Error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<UserActivity>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get product details w.r.t id
        /// </summary>
        /// <param name="productId">Required parameter: Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.</param>
        /// <return>Returns the Product response from the API call</return>
        public Product GetProductDetailByID(string productId)
        {
            Task<Product> t = GetProductDetailByIDAsync(productId);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Get product details w.r.t id
        /// </summary>
        /// <param name="productId">Required parameter: Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.</param>
        /// <return>Returns the Product response from the API call</return>
        public async Task<Product> GetProductDetailByIDAsync(string productId)
        {
            //validating required parameters
            if (null == productId)
                throw new ArgumentNullException("productId", "The parameter \"productId\" is a required parameter and cannot be null.");

            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/products/{product_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //return null on 404
            if (_response.StatusCode == 404)
                 return null;

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Product>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get the real time status of an ongoing trip that was created using the Ride Request endpoint.
        /// </summary>
        /// <param name="requestId">Required parameter: Example: </param>
        /// <return>Returns the RequestDetailsCollections response from the API call</return>
        public RequestDetailsCollections GetRequestDetails(string requestId)
        {
            Task<RequestDetailsCollections> t = GetRequestDetailsAsync(requestId);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Get the real time status of an ongoing trip that was created using the Ride Request endpoint.
        /// </summary>
        /// <param name="requestId">Required parameter: Example: </param>
        /// <return>Returns the RequestDetailsCollections response from the API call</return>
        public async Task<RequestDetailsCollections> GetRequestDetailsAsync(string requestId)
        {
            //validating required parameters
            if (null == requestId)
                throw new ArgumentNullException("requestId", "The parameter \"requestId\" is a required parameter and cannot be null.");

            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/requests/{request_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "request_id", requestId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes

            //return null on 404
            if (_response.StatusCode == 404)
                 return null;

            else if (_response.StatusCode == 400)
                throw new APIException(@"Malformed request.", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Unauthorized the request requires user authentication (not logged in).", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", _context);

            else if (_response.StatusCode == 406)
                throw new APIException(@"Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types, such as ?Unacceptable content type. Request resource as: application/json.", _context);

            else if (_response.StatusCode == 409)
                throw new APIException(@"A conflict needs to be resolved before the request can be made.", _context);

            else if (_response.StatusCode == 422)
                throw new APIException(@"Invalid request. The request body is parse-able however with invalid content or there are issues with a rider's user account.", _context);

            else if (_response.StatusCode == 429)
                throw new APIException(@"Too Many Requests. Rate limited.", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Internal Server Error", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestDetailsCollections>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// The Products endpoint returns information about the Uber products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order.
        /// </summary>
        /// <param name="GetProductsTypesInput">Object containing request parameters</param>
        /// <return>Returns the ProductCollection response from the API call</return>
        public ProductCollection GetProductsTypes(GetProductsTypesInput input)
        {
            Task<ProductCollection> t = GetProductsTypesAsync(input);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// The Products endpoint returns information about the Uber products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order.
        /// </summary>
        /// <param name="GetProductsTypesInput">Object containing request parameters</param>
        /// <return>Returns the ProductCollection response from the API call</return>
        public async Task<ProductCollection> GetProductsTypesAsync(GetProductsTypesInput input)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/products");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "latitude", input.Latitude },
                { "longitude", input.Longitude }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes

            //return null on 404
            if (_response.StatusCode == 404)
                 return null;

            else if (_response.StatusCode == 400)
                throw new APIException(@"Malformed request.", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Unauthorized the request requires user authentication (not logged in).", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", _context);

            else if (_response.StatusCode == 406)
                throw new APIException(@"Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: ?Unacceptable content type. Request resource as: application/json, etc.", _context);

            else if (_response.StatusCode == 422)
                throw new APIException(@"Invalid request. The request body is parse-able however with invalid content.", _context);

            else if (_response.StatusCode == 429)
                throw new APIException(@"Too Many Requests. Rate limited.", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Internal Server Error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ProductCollection>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// The User Profile endpoint returns information about the Uber user that has authorized with the application.
        /// </summary>
        /// <return>Returns the UserProfile response from the API call</return>
        public UserProfile GetUserProfile()
        {
            Task<UserProfile> t = GetUserProfileAsync();
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// The User Profile endpoint returns information about the Uber user that has authorized with the application.
        /// </summary>
        /// <return>Returns the UserProfile response from the API call</return>
        public async Task<UserProfile> GetUserProfileAsync()
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v1/me");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("Authorization", string.Format("Bearer {0}", Configuration.OAuthAccessToken));

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes

            //return null on 404
            if (_response.StatusCode == 404)
                 return null;

            else if (_response.StatusCode == 400)
                throw new APIException(@"Malformed request.", _context);

            else if (_response.StatusCode == 401)
                throw new APIException(@"Unauthorized the request requires user authentication (not logged in).", _context);

            else if (_response.StatusCode == 403)
                throw new APIException(@"Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", _context);

            else if (_response.StatusCode == 406)
                throw new APIException(@"Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: ?Unacceptable content type. Request resource as: application/json, etc.", _context);

            else if (_response.StatusCode == 422)
                throw new APIException(@"Invalid request. The request body is parse-able however with invalid content.", _context);

            else if (_response.StatusCode == 429)
                throw new APIException(@"Too Many Requests. Rate limited.", _context);

            else if (_response.StatusCode == 500)
                throw new APIException(@"Internal Server Error.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<UserProfile>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 